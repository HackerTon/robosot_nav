#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
import cv2
import numpy as np

min_va = np.asarray([0, 0, 0])
max_va = np.asarray([0, 0, 0])

# RED
# min_va = np.asarray([0, 0, 255])
# max_va = np.asarray([30, 10, 255])

# YELLOW
# min_va = np.asarray([0, 20, 255])
# max_va = np.asarray([30, 105, 255])

# BLUE
# min_va = np.asarray([0, 105, 255])
# max_va = np.asarray([30, 143, 255])


def on_trackbar(val):
    min_va[0] = val


def on_trackbar2(val):
    min_va[1] = val


def on_trackbar3(val):
    min_va[2] = val


def on_trackbara(val):
    max_va[0] = val


def on_trackbarb(val):
    max_va[1] = val


def on_trackbarc(val):
    max_va[2] = val


class cv_converter:
    def __init__(self):
        self.image_sub = rospy.Subscriber("camera/image", Image, self.callback)

        self.bridge = CvBridge()

    def callback(self, data):
        cv2.namedWindow('Image after')
        cv2.namedWindow('Image before')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        org_image = cv_image

        cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

        cv_image = cv2.inRange(cv_image, min_va, max_va)

        cv2.createTrackbar('a', 'Image after', 0, 255, on_trackbar)
        cv2.createTrackbar('b', 'Image after', 0, 255, on_trackbar2)
        cv2.createTrackbar('c', 'Image after', 0, 255, on_trackbar3)
        cv2.createTrackbar('1', 'Image after', 0, 255, on_trackbara)
        cv2.createTrackbar('2', 'Image after', 0, 255, on_trackbarb)
        cv2.createTrackbar('3', 'Image after', 0, 255, on_trackbarc)

        cv2.imshow('Image after', cv_image)
        cv2.imshow('Image before', org_image)
        cv2.waitKey(1)


if __name__ == "__main__":
    image_converter = cv_converter()

    rospy.init_node('nav', anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print('CLOSE!')

    cv2.destroyAllWindows()
