#!/usr/bin/env python

import rospy
import actionlib
import logging
import sys
import numpy as np


from enum import Enum
from geometry_msgs.msg import Twist, Point32, Quaternion, Pose, Point
from nav_msgs.msg import Odometry, OccupancyGrid, MapMetaData
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from tf.transformations import quaternion_from_euler, euler_from_quaternion

search_point = ([1.38, 1.28], [1.06, -1.21], [-0.968, 1.41], [-1.01, -1.43])

DEBUG = False


def goal(pos, quater):
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = 'map'
    goal.target_pose.header.stamp = rospy.Time.now()

    goal.target_pose.pose = Pose(
        Point(pos[0], pos[1], pos[2]), Quaternion(quater[0], quater[1], quater[2], quater[3]))

    return goal


class STATUSTYPE(Enum):
    SEARCHING = 0
    MOVINGTOBALL = 1
    MOVINGTOTARGET = 2
    MOVINGTORANDOM = 3


class Accumulator:
    def __init__(self, ball_thresh=1000, stop_thresh=5000):
        self.ball_thresh = ball_thresh
        self.stop_thresh = stop_thresh

        self.ball_accm = 0
        self.stop_accm = 0
        self.status = 0
        self.trigger = False

    def _process(self, point):
        if point[0] != -1.0:
            self.ball_accm += 1
        else:
            self.stop_accm += 1

        # FOUND
        if self.ball_accm > self.ball_thresh and self.stop_accm < self.stop_thresh:
            self.status = 1
            self.ball_accm = 0
            self.stop_accm = 0

        # NOT FOUND
        elif self.stop_accm > self.stop_thresh and self.ball_accm < self.ball_thresh:
            self.status = 0
            self.ball_accm = 0
            self.stop_accm = 0

    def filter(self, point):
        self._process(point)

        if self.status == 1:
            if not self.trigger:
                self.trigger = True
        else:
            if self.trigger:
                self.trigger = False
                self.status = 2

        return self.status


class Pointsub:
    def __init__(self):
        self.coor = [-1.0, -1.0]
        self.point = rospy.Subscriber('pointer/point1', Point32, self.callback)

    def callback(self, data):
        self.coor = [data.x, data.y]


class Navigation:
    def __init__(self):
        self.position = None

        rospy.Subscriber('odom', Odometry, self.odomcallback, queue_size=1)

        self.base_move = actionlib.SimpleActionClient(
            'move_base', MoveBaseAction)
        self.base_move.wait_for_server()
        self.cancel_goals()

    def odomcallback(self, data):
        self.position = [data.pose.pose.position.x,
                         data.pose.pose.position.y - 0.048]

    def move_goal(self, pos=(0.0, 0.0, 0.0), quat=(0.0, 0.0, 0.0, 1)):
        target_goal = goal(pos, quat)

        print('Moving to point x: {0:.2f} y:{1:.2f} z: {2:.2f}'.format(
            pos[0], pos[1], pos[2]))
        self.base_move.send_goal_and_wait(target_goal)

        return self.base_move.get_state()

    def cancel_goals(self):
        self.base_move.cancel_all_goals()

    def rotate90(self):
        x, y = self.position

        self.move_goal((x, y, 0.0), quaternion_from_euler(0, 0, 90))


class Generator:
    def __init__(self):
        self.map = None
        self.resolution = None
        self.width = None
        self.height = None
        self.origin = None

        rospy.Subscriber('/move_base/global_costmap/costmap',
                         OccupancyGrid, self.mapcallback)

    def mapcallback(self, data):
        self.map = np.reshape(data.data, [79, 100])

        self.resolution = data.info.resolution
        self.width = data.info.width
        self.height = data.info.height
        self.origin = [data.info.origin.position.x,
                       data.info.origin.position.y]

    def generate(self):
        max_width = self.width * self.resolution
        max_height = self.height * self.resolution

        rand_x = np.random.uniform(
            self.origin[0] + 0.1, 2.22)

        rand_y = np.random.uniform(
            self.origin[1] + 0.1, self.origin[1] + max_height)

        cell_x = int(rand_x / self.resolution)
        cell_y = int(rand_y / self.resolution)

        if self.map is not None:
            if self.map[cell_y, cell_x] < 50:
                return rand_x, rand_y
            else:
                return self.generate()
        else:
            print('map not , trying again')
            return self.generate()


x = y = z = 0.0


def o_dom(data):
    global x, y, z
    oq = data.pose.pose.orientation
    (x, y, z) = euler_from_quaternion([oq.x, oq.y, oq.z, oq.w])


def main(args):
    rospy.init_node('navigation_node', anonymous=True)

    points = Pointsub()
    navigator = Navigation()

    accum = Accumulator()
    gen = Generator()

    cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size=1)
    rospy.Subscriber('odom', Odometry, o_dom)

    rate = rospy.Rate(1)
    count = 0

    print('starting')
    rospy.sleep(3)

    twist = Twist()
    while not rospy.is_shutdown():
        filter_status = accum.filter(points.coor)
        current_status = STATUSTYPE.SEARCHING if (
            points.coor[0] == -1) else STATUSTYPE.MOVINGTOBALL

        if current_status is STATUSTYPE.SEARCHING:
            print('{} \n'.format(current_status))

            error = 1
            while error > 0.05:
                error = (np.pi / 360) * 180 - z

                twist.angular.z = 0.20 * error
                twist.linear.x = 0.0

                cmd_vel.publish(twist)
                filter_status = 1 if points.coor[0] != -1 else 0

                if filter_status is 1:
                    current_status = STATUSTYPE.MOVINGTOBALL
                    break
                else:
                    current_status = STATUSTYPE.MOVINGTORANDOM

        if current_status is STATUSTYPE.MOVINGTOBALL:
            print('{} \n'.format(current_status))

            while points.coor[0] != -1:
                try:
                    twist.angular.z = (160 - points.coor[0]) * 0.005
                    twist.linear.x = twist.angular.z

                    if twist.linear.x < 0.10:
                        twist.linear.x = 0.10
                except ZeroDivisionError:
                    twist.linear.x = 0

                cmd_vel.publish(twist)

            twist.angular.x = 0.0
            twist.linear.x = 0.12
            cmd_vel.publish(twist)
            rospy.sleep(2)

            nav_status = navigator.move_goal([2.22, 0.661, 0.0])

            if nav_status is 3:
                twist.angular.x = 0.0
                twist.linear.x = 0.0
                cmd_vel.publish(twist)
                rospy.sleep(3)

                print('Move forward')
                twist.angular.x = 0.0
                twist.linear.x = 0.1
                cmd_vel.publish(twist)
                rospy.sleep(2)

                twist.angular.x = 0.0
                twist.linear.x = 0.0
                cmd_vel.publish(twist)
                rospy.sleep(2)

                print('Move backward')
                twist.angular.x = 0.0
                twist.linear.x = -0.1
                cmd_vel.publish(twist)
                rospy.sleep(2)

                print('Rotate facing back')
                twist.angular.x = 0.3
                twist.linear.x = 0.0
                cmd_vel.publish(twist)
                rospy.sleep(5)
            else:
                break
                print('system failure')

        elif current_status == STATUSTYPE.MOVINGTORANDOM:
            print('{}'.format(current_status))

            if count is not 4:
                x, y = gen.generate()
                nav_status = navigator.move_goal([x, y, 0.0])

                count += 1
            else:
                count = 0

        # try:
        #     if current_status is STATUSTYPE.SEARCHING:
        #         error = 99

        #         # PID need to be tune
        #         while error > 0.05:
        #             twist.angular.z = 0.05 * ((np.pi / 360) * 90 - z)
        #             twist.linear.x = 0.0
        #             cmd_vel.publish(twist)

        #             error = twist.angular.z

        #             cur_point = points.coor
        #             result = accum.filter(cur_point)

        #             if DEBUG:
        #                 print('Turning error: {}'.format(error))
        #                 print('Accumulator: {}'.format(result))

        #             if result is 1:
        #                 break
        #         #

        #     # Ball founded, moving to ball
        #     if current_status is STATUSTYPE.MOVINGTOBALL:
        #         while accum.filter(points.coor) is 1:
        #             twist.angular.z = (160 - cur_point[0]) * 0.005
        #             twist.linear.x = 1 / -twist.angular.z

        #             if twist.linear.x < -0.05:
        #                 twist.linear.x = -0.05

        #             cmd_vel.publish(twist)
        #     # Ball captured, moving ball to target location
        #     elif current_status is STATUSTYPE.MOVINGTOTARGET:
        #         while True:
        #             twist.angular.x = 0.2
        #             twist.linear.x = 0.0
        #             cmd_vel.publish(twist)
        #             rospy.sleep(2)

        #             nav_status = navigator.move_goal([2.22, 0.661, 0.0])

        #             if nav_status is 3:
        #                 twist.linear.x = 0.1
        #                 cmd_vel.publish(twist)
        #                 rospy.sleep(2)
        #             else:
        #                 break
        #                 print('system failure')

        #     # No ball was found, change search location
        #     elif current_status is STATUSTYPE.MOVINGTORANDOM:
        #         if count is not 4:
        #             x, y = gen.generate()
        #             nav_status = navigator.move_goal([x, y, 0.0])

        #             count += 1
        #         else:
        #             count = 0
        # except KeyboardInterrupt:
        #     print('Program Interrupt by user!')
if __name__ == "__main__":
    main(sys.argv)
